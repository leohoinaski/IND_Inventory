#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jul 27 15:26:04 2022

@author: leohoinaski
"""
import os
import numpy as np
import pandas as pd
import netCDF4 as nc
import datetime
from data2CubeData import gridSpecMCIP
from netCDFcreator import createNETCDFtemporalAndLayered,createNETCDFannual
from data2Data import emissReader, gridSpec, userDomain, AERMODDomain
from IND_speciate import IndSpeciate
from AERMOD_INPUTweb import pointSourceInput

#================================INPUTS======================================
# userGrid -> 0 for user-defined / 1 for mcip based grid / 3 for user grid and
# AERMOD ouput
userGrid = 3

#------- If userGrid  = 0 - Users can change the domain and resolution here----
lati = -36 #(Brazil) #lati = int(round(bound.miny)) # Initial latitud>

latf = 8 #(Brazil) #latf = int(round(bound.maxy)) # Final latitude (>

loni = -76 #(Brazil) #loni = int(round(bound.minx)) # Initial longit>

lonf = -32 #(Brazil) #lonf = int(round(bound.maxx)) # Final longitu>

deltaX = 0.05 # Grid resolution/spacing in x direction

deltaY = 0.05 # Grig resolution/spacing in y direction

fileId = 'BR' # Simulation identification.

#-------------- If userGrid = 1, define the path to mcip files-----------------
mcipPath = '/media/leohoinaski/HDD/SC_2019'
gridName = 'SC_2019'

#------- If userGrid  = 3 - Users can change the domain here-------------------
polId = 'PMC' # Ver tabela de emissões do CMAQ

lati = -36 #(Brazil) #lati = int(round(bound.miny)) # Initial latitud>

latf = 8 #(Brazil) #latf = int(round(bound.maxy)) # Final latitude (>

loni = -76 #(Brazil) #loni = int(round(bound.minx)) # Initial longit>

lonf = -32 #(Brazil) #lonf = int(round(bound.maxx)) # Final longitu>

fileId = 'BR' # Simulation identification.

user = 'leohoinaski'
standard = 50
start_year=2022
start_month=1
start_day=1
end_year=2022
end_month=12
end_day=31
#===============================PROCESSING=====================================

# Path to functions and BRAVESdatabase_main.py
rootPath = os.path.abspath(os.getcwd())
os.chdir(rootPath)

# Path to inputs
inPath = rootPath +'/Inputs'

# THis is your grid identification   
if userGrid == 0:
    
    outPath = rootPath +'/Outputs/'+fileId
    if os.path.isdir(outPath)==0:
        os.mkdir(outPath)
        
    gridId = fileId+'_'+str(deltaX)+'x'+str(deltaY) # grid definition identification
    domain,x,y = userDomain(lati,latf,loni,lonf,deltaX,deltaY)
    dataEmissIND, centerIND, emisPar = emissReader(rootPath,domain)
    dataIND,xX,yY = gridSpec (rootPath,outPath,dataEmissIND,centerIND,x,y)
    name = 'IND_GriddedAnnualEmissions_'+gridId+'.nc'
    conv = 365*24*60*60/1000
    createNETCDFannual(rootPath,outPath,name,dataIND*conv,xX,yY)
    
elif userGrid == 1:
    
    outPath = rootPath +'/Outputs/'+gridName
    if os.path.isdir(outPath)==0:
        os.mkdir(outPath)
        
    mcipGRIDDOT2DPath = mcipPath+'/GRIDDOT2D_'+gridName+'.nc'
    mcipGRIDCRO2DPath = mcipPath+'/GRIDCRO2D_'+gridName+'.nc'
    mcipMETCRO3Dpath = mcipPath+'/METCRO3D_'+gridName+'.nc'
    mcipMETCRO2Dpath = mcipPath+'/METCRO2D_'+gridName+'.nc' 
    gridId = gridName+'_'+'MCIPgrid' # grid definition identification
    dataTempo=None
    dataTempo = gridSpecMCIP (rootPath,outPath,
                      mcipMETCRO3Dpath,mcipMETCRO2Dpath,
                      mcipGRIDCRO2DPath,mcipGRIDDOT2DPath)
    
    ds3 = nc.Dataset(mcipMETCRO3Dpath)
    time=ds3['TFLAG'][:]       
    dt0 = datetime.datetime.strptime(str(time[:,0,:][:,0][0]),'%Y%j').date()
    dt1 = datetime.datetime.strptime(str(time[:,0,:][:,0][-1]),'%Y%j').date()
    hours = [np.array(time[:,0,:][:,1]/10000)[0],
                np.array(time[:,0,:][:,1]/10000)[-1]]
    
    name = 'IND2CMAQ'+\
        '_'+str(dt0.year)+'_'+str(dt0.month).zfill(2)+'_'+str(dt0.day).zfill(2)+'_'+str(int(hours[0])).zfill(2)+'00'+\
            '_to_'+str(dt1.year)+'_'+str(dt1.month).zfill(2)+'_'+str(dt1.day).zfill(2)+'_'+str(int(hours[1])).zfill(2)+'00'+'.nc'

    createNETCDFtemporalAndLayered(rootPath,outPath,name,dataTempo,mcipMETCRO3Dpath)

elif userGrid == 3:
    
    outPath = rootPath +'/Outputs/'+fileId
    if os.path.isdir(outPath)==0:
        os.mkdir(outPath)
        
    domain = AERMODDomain(lati,latf,loni,lonf)
    dataEmissIND, centerIND, emisPar, indID = emissReader(rootPath,domain)
    dataEmissX = IndSpeciate(rootPath,dataEmissIND)
    dataCSV = pd.DataFrame()
    dataCSV['fonte'] = indID
    dataCSV['tipo'] = 'POINT'
    dataCSV['Long'] = centerIND.x
    dataCSV['Lat'] = centerIND.y
    dataCSV['Altitude'] = 0
    dataCSV['Altura da chaminé'] = emisPar.Hs
    dataCSV['Temperatura de saída'] = emisPar.Ts
    dataCSV['Velocidade de saída'] = emisPar.Vs
    dataCSV['Diâmetro'] = emisPar.Ds
    dataCSV['Emissão'] = dataEmissX[polId]
    dataCSV.to_csv(outPath+'/IND_AERMODall.csv')
    
    for ii in range(0,dataCSV['fonte'].shape[0]):
        dataCSV['fonte'][ii] = 'ID_'+str(ii)
        
    dataCSV=dataCSV.dropna(axis=0)
    dataCSV.to_csv(outPath+'/IND_AERMODwithData.csv')
    pointSourceInput(dataCSV,user, polId, standard, start_year, start_month, start_day, end_year, end_month, end_day,outPath)
    
    